<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:cc="http://xmlns.jcp.org/jsf/composite"
      xmlns:h="http://xmlns.jcp.org/jsf/html"
      xmlns:ui="http://xmlns.jcp.org/jsf/facelets">

  <!--xmlns:a="http://xmlns.jcp.org/jsf/passthrough"-->
  <!--WADL component. Requires a WADL bean.-->
  <!--update 01/12/19 to properly handle form encoded representations-->
  <!--update 01/13/19 to support conditional collapsibility, render short path in header-->
  <!--update 11/22/19 using tables instead of divs for cleaner presentation-->

  <!--  USAGE-->
  <!--Must include the wadl.css file. e.g.-->
  <!--<link rel="stylesheet" type="text/css" href=" https://s3.amazonaws.com/keybridge-cdn/assets/kb/css/1.0.4/wadl.css"/>-->

  <!-- INTERFACE -->
  <cc:interface>
    <cc:attribute name="method" required="true" type="net.java.dev.wadl.Method" displayName="The method ID"/>
    <cc:attribute name="description" required="false" default="" type="java.lang.String" displayName="The resource description. If present this is displayed below the label. May be extensive. Is printed without encoding (as HTML)."/>
    <cc:attribute name="title" required="false" default="Rest Resource" type="java.lang.String" displayName="The resource label"/>
    <cc:attribute name="icon" required="false" default="glyphicon glyphicon-cloud" type="java.lang.String" displayName="A FA icon to display in the header."/>
    <cc:attribute name="collapsible" required="false" default="true" type="java.lang.Boolean" displayName="Whether the panel body is collapsible."/>
    <cc:attribute name="renderPath"  required="false" default="true" type="java.lang.Boolean" displayName="Render the path in the header."/>
    <cc:attribute name="wadlBean" required="true" shortDescription="A backing bean supporting WADL text processing."/>
    <cc:attribute name="verbose" required="false" default="false" type="java.lang.Boolean" displayName="Whether to log warnings when a label is not found."/>
  </cc:interface>

  <!--NOTE: to use this widget you must add the WADL CSS somewhere in your app!-->

  <!-- IMPLEMENTATION -->
  <cc:implementation>
    <div id="#{cc.clientId}" class="wadl-method">
      <h:panelGroup rendered="#{cc.attrs.method !=null}">

        <div class="card border-#{wadlBean.buildCSSType(cc.attrs.method.name)} mb-3">
          <div class="wadl card-header" role="tab" id="#{cc.attrs.method.id}" style="position: relative; border-bottom: none;">
            <h:panelGroup rendered="#{cc.attrs.collapsible}">
              <a data-toggle="collapse" data-parent="##{cc.clientId}" href="#collapse#{cc.attrs.method.id}" aria-expanded="true" aria-controls="collapse#{cc.attrs.method.id}">
                <div class="wadl-button bg-#{wadlBean.buildCSSType(cc.attrs.method.name)}">  <h:outputText value="#{cc.attrs.method.name}"/> </div>
                <h:outputText value="#{cc.attrs.wadlBean.parseMethodId(cc.attrs.method.id)}" styleClass="wadl-label"/>
              </a>
            </h:panelGroup>

            <h:panelGroup rendered="#{not cc.attrs.collapsible}">
              <div class="wadl-button bg-#{wadlBean.buildCSSType(cc.attrs.method.name)}">  <h:outputText value="#{cc.attrs.method.name}"/> </div>
              <h:outputText value="#{cc.attrs.wadlBean.parseMethodId(cc.attrs.method.id)}" styleClass="wadl-label"/>
            </h:panelGroup>

            <h:outputText value="#{cc.attrs.wadlBean.buildFormattedURI(cc.attrs.method.parent.path)}" escape="false" styleClass="text-small float-right" rendered="#{cc.attrs.renderPath}"/>
          </div>

          <div id="collapse#{cc.attrs.method.id}" class="#{cc.attrs.collapsible?'collapse':''}" role="tabpanel" aria-labelledby="headingOne">
            <div class="card-body">
              <!--method uri-->
              <h:outputText value="#{cc.attrs.wadlBean.buildFormattedURI(cc.attrs.method.path)}" escape="false" styleClass="wadl-uri d-block mb-3"/>
              <!--method description-->
              <h:outputText value="#{cc.attrs.wadlBean.getMethodDescription(cc.attrs.method.id)}" escape="false" styleClass="card-text d-block mb-3"/>
              <h:panelGroup rendered="#{not empty cc.attrs.wadlBean.findMethodParameters(cc.attrs.method)}">
                <!--request query params-->
                <p class="text-bold text-small">Request parameters</p>
                <h:dataTable value="#{cc.attrs.wadlBean.findMethodParameters(cc.attrs.method)}" var="p"
                             styleClass="table table-sm table-no-border"
                             columnClasses="text-bold w-20, text-small text-capitalize, w-100, float-right">
                  <h:column>
                    #{p.name}
                  </h:column>
                  <h:column>
                    <span class="text-code text-success">#{p.type.localPart}</span>
                  </h:column>
                  <h:column>
                    <h:outputText value="#{cc.attrs.wadlBean.getLabel(cc.attrs.method.id, p.name)}" escape="false" styleClass="wadl-var"/>
                    <h:panelGroup styleClass="d-block text-small text-muted" rendered="#{p.path ne null}">
                      Name = <h:outputText value="#{p.path}" styleClass="text-danger text-monospace"/>
                    </h:panelGroup>
                    <h:panelGroup styleClass="d-block text-small text-muted" rendered="#{p.default ne null}">
                      Default = <h:outputText value="#{p.default}" styleClass="text-danger text-monospace"/>
                    </h:panelGroup>
                  </h:column>
                  <h:column>
                    <span class="text-code text-small text-muted">#{p.style}</span>
                  </h:column>

                </h:dataTable>
              </h:panelGroup>

              <h:panelGroup rendered="#{cc.attrs.wadlBean.isPutOrPost(cc.attrs.method)}">
                <h:panelGroup rendered="#{not empty cc.attrs.wadlBean.findUploadMethodElements(cc.attrs.method).entrySet().toArray()}">
                  <!--request post parameters-->
                  <!--Request objects are only valid for PUT or POST operations-->
                  <ui:repeat value="#{cc.attrs.wadlBean.findUploadMethodElements(cc.attrs.method).entrySet().toArray()}" var="mvmap">
                    <p class="text-small">
                      <span class="text-bold">Form parameters</span>
                      <span class="float-right"><h:outputText value="#{mvmap.key.mediaType}" styleClass="text-code"/></span>
                    </p>
                    <h:dataTable value="#{mvmap.value}" var="p"
                                 styleClass="table table-sm table-no-border"
                                 columnClasses="text-bold w-20, text-small text-capitalize, w-100, float-right">
                      <h:column>
                        #{p.name}
                      </h:column>
                      <h:column>
                        <span class="text-code text-success">#{p.type.localPart}</span>
                      </h:column>
                      <h:column>
                        <h:outputText value="#{cc.attrs.wadlBean.getLabel(cc.attrs.method.id, p.name)}" escape="false" styleClass="wadl-var"/>
                        <h:panelGroup styleClass="d-block text-small text-muted" rendered="#{p.path ne null}">
                          Name = <h:outputText value="#{p.path}" styleClass="text-danger text-monospace"/>
                        </h:panelGroup>
                        <h:panelGroup styleClass="d-block text-small text-muted" rendered="#{p.default ne null}">
                          Default = <h:outputText value="#{p.default}" styleClass="text-danger text-monospace"/>
                        </h:panelGroup>
                      </h:column>
                      <h:column>
                        <span class="text-code text-small text-muted">#{p.style}</span>
                      </h:column>
                    </h:dataTable>
                  </ui:repeat>
                </h:panelGroup>

                <h:panelGroup rendered="#{not empty cc.attrs.wadlBean.findMethodRequestElements(cc.attrs.method).entrySet().toArray()}">
                  <!--request post objects and accepted encoding-->
                  <ui:repeat value="#{cc.attrs.wadlBean.findMethodRequestElements(cc.attrs.method).entrySet().toArray()}" var="mvmap">
                    <div>
                      <span class="text-bold"> #{mvmap.key} </span>
                      <ui:repeat value="#{mvmap.value}" var="rep">
                        <span class="text-small text-#{cc.attrs.wadlBean.buildCSSType(rep.mediaType)} mx-2">#{rep.mediaType}</span>
                      </ui:repeat>
                    </div>
                    <h:outputText value="#{cc.attrs.wadlBean.getLabel(cc.attrs.method.id, mvmap.key)}" escape="false" styleClass="wadl-var"/>
                  </ui:repeat>
                </h:panelGroup>
              </h:panelGroup>

              <p class="text-bold text-small">Response encoding</p>

              <ui:repeat value="#{cc.attrs.method.response}" var="r">

                <h:dataTable value="#{cc.attrs.wadlBean.findMethodResponseElements(r).entrySet().toArray()}" var="mvmap"
                             styleClass="table table-sm table-no-border"
                             columnClasses="text-bold w-20, , w-75">
                  <h:column>
                    HTTP #{r.status.size() == 0? '200' : r.status}
                  </h:column>
                  <h:column>
                    <ui:repeat value="#{mvmap.value}" var="rep">
                      <span class="text-#{cc.attrs.wadlBean.buildCSSType(rep.mediaType)} mr-2">#{rep.mediaType}</span>
                    </ui:repeat>
                  </h:column>
                  <h:column>
                    <h:outputText value="#{cc.attrs.wadlBean.getLabel(cc.attrs.method.id, mvmap.key)}" escape="false" styleClass="wadl-var"/>
                  </h:column>
                </h:dataTable>
              </ui:repeat>
            </div>
          </div>
        </div>
      </h:panelGroup>
    </div>
  </cc:implementation>
</html>